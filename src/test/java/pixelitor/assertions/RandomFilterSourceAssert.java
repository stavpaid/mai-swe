/*
 * Copyright 2020 Laszlo Balazs-Csiki and Contributors
 *
 * This file is part of Pixelitor. Pixelitor is free software: you
 * can redistribute it and/or modify it under the terms of the GNU
 * General Public License, version 3 as published by the Free
 * Software Foundation.
 *
 * Pixelitor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Pixelitor. If not, see <http://www.gnu.org/licenses/>.
 */

package pixelitor.assertions;

import org.assertj.core.api.AbstractObjectAssert;
import pixelitor.filters.Filter;
import pixelitor.filters.RandomFilterSource;

import static java.lang.String.format;

/**
 * Custom AssertJ assertions for {@link RandomFilterSource} objects.
 * Based partially on the code generated by CustomAssertionGenerator.
 */
public class RandomFilterSourceAssert extends AbstractObjectAssert<RandomFilterSourceAssert, RandomFilterSource> {

    /**
     * Creates a new <code>{@link RandomFilterSourceAssert}</code> to make assertions on actual RandomFilterSource.
     *
     * @param actual the RandomFilterSource we want to make assertions on.
     */
    public RandomFilterSourceAssert(RandomFilterSource actual) {
        super(actual, RandomFilterSourceAssert.class);
    }

    public RandomFilterSourceAssert lastFilterIsNull() {
        isNotNull();

        if (actual.getLastFilter() != null) {
            failWithMessage("\nExpecting that the last filter is null, but it is not.");
        }

        return this;
    }

    public RandomFilterSourceAssert lastFilterIsNotNull() {
        isNotNull();

        if (actual.getLastFilter() == null) {
            failWithMessage("\nExpecting that the last filter is not null, but it is.");
        }

        return this;
    }

    public RandomFilterSourceAssert lastFilterIs(Filter expected) {
        isNotNull();

        Filter lastFilter = actual.getLastFilter();
        if (lastFilter != expected) {
            failWithMessage(format("""
                Expecting that the last filter is equal to the expected, but it is not.
                Expected: %s, actual last filer: %s""", expected.getName(), lastFilter.getName()));
        }

        return this;
    }

    public RandomFilterSourceAssert previousFilterIs(Filter expected) {
        isNotNull();

        Filter previous = actual.getPrevious();
        if (previous != expected) {
            failWithMessage(format("""
                Expecting that the previous filter is equal to the expected, but it is not.
                Expected: %s, actual previous filer: %s""", expected.getName(), previous.getName()));
        }

        return this;
    }

    public RandomFilterSourceAssert nextFilterIs(Filter expected) {
        isNotNull();

        Filter next = actual.getNext();
        if (next != expected) {
            failWithMessage(format("""
                Expecting that the next filter is equal to the expected, but it is not.
                Expected: %s, actual next filer: %s""", expected.getName(), next.getName()));
        }

        return this;
    }

    /**
     * Verifies that the actual RandomFilterSource has next.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual RandomFilterSource does not have next.
     */
    public RandomFilterSourceAssert hasNext() {
        isNotNull();

        if (!actual.hasNext()) {
            failWithMessage("\nExpecting that actual RandomFilterSource has next but does not have.");
        }

        return this;
    }

    /**
     * Verifies that the actual RandomFilterSource does not have next.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual RandomFilterSource has next.
     */
    public RandomFilterSourceAssert doesNotHaveNext() {
        isNotNull();

        if (actual.hasNext()) {
            failWithMessage("\nExpecting that actual RandomFilterSource does not have next but has.");
        }

        return this;
    }

    /**
     * Verifies that the actual RandomFilterSource has previous.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual RandomFilterSource does not have previous.
     */
    public RandomFilterSourceAssert hasPrevious() {
        isNotNull();

        if (!actual.hasPrevious()) {
            failWithMessage("\nExpecting that actual RandomFilterSource has previous but does not have.");
        }

        return this;
    }

    /**
     * Verifies that the actual RandomFilterSource does not have previous.
     *
     * @return this assertion object.
     * @throws AssertionError - if the actual RandomFilterSource has previous.
     */
    public RandomFilterSourceAssert doesNotHavePrevious() {
        isNotNull();

        if (actual.hasPrevious()) {
            failWithMessage("\nExpecting that actual RandomFilterSource does not have previous but has.");
        }

        return this;
    }
}
